/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lightoff_tramini_version_console;

/**
 *
 * @author adrientramini
 */


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class FenetreAceuil extends JFrame {
    private JTextField tailleGrilleField;
    private JComboBox<String> niveauDifficulteComboBox;

    public FenetreAceuil() {
        initComponents();

        // Configuration de la fenêtre d'accueil
        setTitle("Accueil");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Création des composants
        JLabel titreLabel = new JLabel("Bienvenue dans le Jeu Light-Off!");
        titreLabel.setFont(new Font("Arial", Font.BOLD, 30));
        JLabel tailleGrilleLabel = new JLabel("Taille de la grille : ");
        tailleGrilleField = new JTextField();
        tailleGrilleField = new JTextField("5");
        tailleGrilleField.setFont(new Font("Arial", Font.PLAIN, 20));
        JLabel niveauDifficulteLabel = new JLabel("Niveau de difficulté : ");
        String[] niveauxDifficulte = {"Facile", "Moyen", "Difficile"};
        niveauDifficulteComboBox = new JComboBox<>(niveauxDifficulte);
        niveauDifficulteComboBox.setFont(new Font("Arial", Font.PLAIN, 20));
        JButton validerButton = new JButton("Jouer");
        validerButton.setBackground(new Color(50, 205, 50));
        validerButton.setForeground(Color.WHITE);
        validerButton.setFocusPainted(false);
        validerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                validerConfiguration();
            }
        });

        // Utilisation de GridBagLayout
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(20, 20, 20, 20); // Marge entre les composants

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        add(titreLabel, gbc);

        gbc.gridy = 1;
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.EAST;
        add(tailleGrilleLabel, gbc);

        gbc.gridx = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL; // Permet d'étirer le composant horizontalement
        add(tailleGrilleField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.EAST;
        add(niveauDifficulteLabel, gbc);

        gbc.gridx = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL; // Permet d'étirer le composant horizontalement
        add(niveauDifficulteComboBox, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 1;
        gbc.anchor = GridBagConstraints.WEST;
        add(validerButton, gbc);
    }

    private void validerConfiguration() {
        int tailleGrille;
        try {
            tailleGrille = Integer.parseInt(tailleGrilleField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Veuillez entrer une valeur valide pour la taille de la grille.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int niveauDifficulte;
        String niveauDifficulteSelectionne = (String) niveauDifficulteComboBox.getSelectedItem();
        switch (niveauDifficulteSelectionne) {
            case "Facile":
                niveauDifficulte = 5;
                break;
            case "Moyen":
                niveauDifficulte = 10;
                break;
            case "Difficile":
                niveauDifficulte = 20;
                break;
            default:
                JOptionPane.showMessageDialog(this, "Niveau de difficulté non reconnu.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
        }

        // Fermeture de la fenêtre d'accueil
        dispose();

        // Ouverture de la fenêtre principale avec les paramètres configurés
        ouvrirFenetrePrincipale(tailleGrille, niveauDifficulte);
    }

    private void ouvrirFenetrePrincipale(int tailleGrille, int niveauDifficulte) {
        new FenetrePrincipale(tailleGrille, niveauDifficulte).setVisible(true);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FenetreAceuil().setVisible(true);
            }
        });
    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
